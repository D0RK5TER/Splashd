"""empty message

Revision ID: 5a96b20439bc
Revises:
Create Date: 2023-02-10 16:19:09.259062

"""
from alembic import op
import sqlalchemy as sa
import os
from datetime import datetime
environment = os.getenv("FLASK_ENV")
SCHEMA = os.environ.get("SCHEMA")
# revision identifiers, used by Alembic.
revision = 'ffdc0a98111c'
down_revision = None
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('users',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('username', sa.String(length=40), nullable=False),
    sa.Column('email', sa.String(length=255), nullable=False),
    sa.Column('hashed_password', sa.String(length=255), nullable=False),
    sa.Column('first_name', sa.String(length=100), nullable=False),
    sa.Column('last_name', sa.String(length=100), nullable=False),
    sa.Column('age', sa.Integer(), nullable=False),
    sa.Column('profile_pic',sa.String(length=255), nullable=True),
    sa.Column('created', sa.DateTime(), default=datetime.now()),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('email'),
    sa.UniqueConstraint('username')
    )
    if environment == "production":
        op.execute(f"ALTER TABLE users SET SCHEMA {SCHEMA};")

    op.create_table('breweries',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('name', sa.String(length=255), nullable=False),
    sa.Column('owner_id', sa.Integer(), nullable=False),
    sa.Column('city_state', sa.String(length=255), nullable=False),
    sa.Column('brewery_type', sa.String(length=255), nullable=False),
    sa.Column('brewery_logo', sa.String(length=255), nullable=False),
    sa.Column('description', sa.Text(), nullable=False),
    sa.Column('created', sa.DateTime(), default=datetime.now()),

    sa.ForeignKeyConstraint(['owner_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('brewery_logo')
    )
    if environment == "production":
        op.execute(f"ALTER TABLE breweries SET SCHEMA {SCHEMA};")

    op.create_table('beers',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('name', sa.String(), nullable=False),
    sa.Column('abv', sa.Float(), nullable=False),
    sa.Column('ibu', sa.Integer(), nullable=False),
    sa.Column('brewery_id', sa.Integer(), nullable=False),
    sa.Column('type', sa.String(length=50), nullable=False),
    sa.Column('description', sa.Text(), nullable=False),
    sa.Column('beer_logo', sa.String(length=255), nullable=False),
    sa.ForeignKeyConstraint(['brewery_id'], ['breweries.id'], ),
    sa.Column('created', sa.DateTime(), default=datetime.now()),

    sa.PrimaryKeyConstraint('id')
    )
    if environment == "production":
        op.execute(f"ALTER TABLE beers SET SCHEMA {SCHEMA};")

    op.create_table('badges',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('beer_id', sa.Integer(), nullable=True),
    sa.Column('brewery_id', sa.Integer(), nullable=True),
    sa.Column('icon', sa.String(length=255), nullable=False),
    sa.Column('description', sa.Text(), nullable=False),
    sa.ForeignKeyConstraint(['beer_id'], ['beers.id'], ),
    sa.ForeignKeyConstraint(['brewery_id'], ['breweries.id'], ),
    sa.Column('created', sa.DateTime(), default=datetime.now()),

    sa.PrimaryKeyConstraint('id')
    )
    if environment == "production":
        op.execute(f"ALTER TABLE badges SET SCHEMA {SCHEMA};")

    op.create_table('reviews',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('beer_id', sa.Integer(), nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('image', sa.String(length=255), nullable=True),
    sa.Column('review_text', sa.Text(), nullable=False),
    sa.Column('rating', sa.Integer(), nullable=False),
    sa.Column('created', sa.DateTime(), default=datetime.now()),

    sa.ForeignKeyConstraint(['beer_id'], ['beers.id'], ),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    if environment == "production":
        op.execute(f"ALTER TABLE reviews SET SCHEMA {SCHEMA};")

    op.create_table('userbadges',
    sa.Column('users', sa.Integer(), nullable=False),
    sa.Column('badges', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['badges'], ['badges.id'], ),
    sa.ForeignKeyConstraint(['users'], ['users.id'], ),
    sa.PrimaryKeyConstraint('users', 'badges')
    )
    if environment == "production":
        op.execute(f"ALTER TABLE userbadges SET SCHEMA {SCHEMA};")
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    # intially commented out undo userbadges to preserve database integrety
    op.drop_table('userbadges')
    op.drop_table('reviews')
    op.drop_table('badges')
    op.drop_table('beers')
    op.drop_table('breweries')
    op.drop_table('users')
    # ### end Alembic commands ###
